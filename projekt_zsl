import java.util.Scanner;

public class AccountsMgmt {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PersonManager oc = new PersonManager();
		CityManager cm = new CityManager(); 
		oc.setCitys(cm);
		
		Scanner scan = new Scanner (System.in);
		Boolean cont = true;
		do {
			System.out.println("Podaj operacje:");
			System.out.println("[1]. Dodanie osoby");
			System.out.println("[2]. Usunięcie osoby");
			System.out.println("[3]. Dodaj miasto");
			System.out.println("[4]. Usuń miasto");
			System.out.println("[5]. Wyswietlenie osób");
			System.out.println("[6]. Wyswietlenie miast");
			System.out.println("[7]. Koniec działania aplikacji");
			String operation = scan.nextLine();
			if ("1".equals(operation)) {
				System.out.println("Podaj imie");
				String name = scan.nextLine();
				System.out.println("Podaj nazwisko");
				String secondName = scan.nextLine();
				System.out.println("Podaj adres");
				String address = scan.nextLine();
				System.out.println("Podaj miasto");
				System.out.println("Lista Miast:");
					try {
						for(City c : cm.getCitys())
							System.out.println(c);
					} catch (Exception e) {
						System.out.println("Błąd w trakcie wyświerlania listy miast: " + e);
						e.printStackTrace();
					}
				int cityAdd = scan.nextInt();
				City c = cm.getCity(cityAdd);
				Person p1 = new Person();
				p1.setFirstName(name);
				p1.setLastName(secondName);
				p1.setAddress(address);
				p1.setCity(c);
				try {
					oc.addPerson(p1);
				} catch (Exception e) {
					System.out.println("Błąd w trakcie dodawania osoby: " + e);
					e.printStackTrace();
				}
			} else if ("2".equals(operation)) {
				System.out.println("Podaj nazwę");
				int personsID = scan.nextInt();
				try {
					if (!oc.removePerson(personsID))
						System.out.println("Osoby nie ma na liście");
					else
						System.out.println("Usunięto osoby z listy");
				} catch (Exception e) {
					System.out.println("Błąd w trakcie usuwania osoby: " + e);
					e.printStackTrace();
				}
			} else if ("3".equals(operation)) {
				System.out.println("Wpisz nazwe miasta");
				String nameCity = scan.nextLine();
				City c1 = new City();
				try {
					cm.addCity(c1);
				} catch (Exception e) {
					System.out.println("Błąd w trakcie dodawania miasta: " + e);
					e.printStackTrace();
				}
			} else if ("4".equals(operation)) {
				System.out.println("Jakie miasto chesz usunąć?");
				String cityName = scan.nextLine();
				try {
					if (!cm.removeCity(cityName))
						System.out.println("Miasta nie ma na liście");
					else
						System.out.println("Usunięto miasto z listy");
				} catch (Exception e) {
					System.out.println("Błąd w trakcie usuwania miasta: " + e);
					e.printStackTrace();
				}
				} else if ("5".equals(operation)) {
				System.out.println("Lista osób:");
				try {
					for (Person p : oc.getPersons()) {
						System.out.println(p);
					}
				} catch (Exception e) {
					System.out.println("Błąd w trakcie wyświetlania listy osób: " + e);
					e.printStackTrace();
					}
				} else if ("6".equals(operation)) {
					System.out.println("Lista Miast:");
					try {
						for(City c : cm.getCitys()) {
							System.out.println(c);
						}
					} catch (Exception e) {
						System.out.println("Błąd w trakcie wyświerlania listy miast: " + e);
						e.printStackTrace();
					}
				} else if ("7".equals(operation)) {
				System.out.println("Bye.");
				cont = false;
			} else {
				System.out.println("Nieprawidłowa operacja");
			}
		} while (cont);
		scan.close();
	}
}

public class City {
	private String name;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	private int id;
	
	
}
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class CityDBLayer {
	public void addCity(City ccit) throws Exception {
		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
	        	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

	        	Statement statement = connection.createStatement();
	        	statement.setQueryTimeout(30); 

		}
    	catch(SQLException e){
    	 	System.err.println(e.getMessage());
    	 	throw e;
    	}
	catch (ClassNotFoundException e) {
		System.err.println(e.getMessage()); 
		throw e;
	}
    	finally {         
		try {
			if(connection != null)
				connection.close();
		}
		catch(SQLException e) {          
			System.err.println(e); 
		}
    }
}
	public void removeCity (City ccti) throws Exception {
		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
	        	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

	        	Statement statement = connection.createStatement();
	        	statement.setQueryTimeout(30); 	        
		}
	    	catch(SQLException e){
	    	 	System.err.println(e.getMessage());
	    	 	throw e;
	    	}
		catch (ClassNotFoundException e) {
			System.err.println(e.getMessage()); 
			throw e;
		}
	    	finally {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e) {          
				System.err.println(e); 
			}
	    }
	}
	public List<City> getCitys () throws Exception {
		List<City> listOfCitys = new ArrayList<City>();

		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
	         	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

	         	Statement statement = connection.createStatement();
	         	statement.setQueryTimeout(30); 

	         	ResultSet resultSet = statement.executeQuery("SELECT CityName,CityID");
	         	while(resultSet.next())
	         	{
	         		City personCity = new City();
	         		personCity.setId(resultSet.getInt("CityID"));
	         		personCity.setName(resultSet.getString("CityName"));


			}
			}
			catch(SQLException e){
			 	System.err.println(e.getMessage()); 
			}       
			finally {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e) {        
				System.err.println(e); 
			}
			}
		
		return listOfCitys;

	}
}

import java.util.ArrayList;
import java.util.List;

public class CityManager {
		private List<City> citys;
		private CityDBLayer citysDB;
		
		public CityManager () {
			citysDB = new CityDBLayer();
			citys = new ArrayList<City>();
		}
		
		public void addCity (City c) throws Exception {
			citysDB.addCity(c);
			citys.add(c);
		}
		
		/*public Boolean removeCity (String name) throws Exception {
			City tempCity = null;
			for (City c : citys)
				if (p.getName().equals(name)) {
					tempCity = c;
					break;
				}
			if (tempCity != null) {
				removeCity(tempCity);
				return true;
			}
			else
				return false;
		}*/
		
		public void removeCity (City c) throws Exception {
			citysDB.removeCity(c);
			citys.remove(c);
		}
		
		public List<City> readCitys() throws Exception {
			this.citys = citysDB.getCitys();
			return this.citys;
		}
		
		public List<City> getCitys() throws Exception {
			if (this.citys == null || this.citys.size() == 0)
				this.citys = citysDB.getCitys();
			return this.citys;
		}
		
		public City getCity (int id) {
			/*for (City c : citys)
				if (c.getName().equals(name)) {
					return c;
				}*/
			return null;
		}


	}
  
  import java.util.ArrayList;
import java.util.List;

public class PersonManager {
	private List<Person> persons;
	private PersonDBLayer personsDB;
	private CityManager citys;
	
	
	
	public CityManager getCitys() {
		return citys;
	}

	public void setCitys(CityManager citys) {
		this.citys = citys;
	}

	public PersonManager () {
		personsDB = new PersonDBLayer();
		persons = new ArrayList<Person>();
	}
	
	public void addPerson (Person p) throws Exception {
		personsDB.addPerson(p);
		persons.add(p);
	}
	
	public Boolean removePerson (int id) throws Exception {
		Person tempPerson = null;
		for (Person p : persons)
			if (p.getId()==(id)) {
				tempPerson = p;
				break;
			}
		if (tempPerson != null) {
			removePerson(tempPerson);
			return true;
		}
		else
			return false;
	}
	
	public void removePerson (Person p) throws Exception {
		personsDB.removePerson(p);
		persons.remove(p);
	}
	
	public List<Person> readPersons() throws Exception {
		this.persons = personsDB.getPersons();
		return this.persons;
	}
	
	public List<Person> getPersons() throws Exception {
		if (this.persons == null || this.persons.size() == 0)
			this.persons = personsDB.getPersons();
		return this.persons;
	}
	
	public Person getPerson (String name) {
		/*for (Person p : persons)
			if (p.getName().equals(name)) {
				return p;
			}*/
		return null;
	}


}


import java.util.ArrayList;
import java.util.List;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class PersonDBLayer {
	public void addPerson(Person prsn) throws Exception {
		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
        	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

        	Statement statement = connection.createStatement();
        	statement.setQueryTimeout(30); 

        	String sql = "INSERT INTO Person (FirstName,LastName,Adress,City) values(?,?)";
        	
    		PreparedStatement pstmt = connection.prepareStatement(sql);
    		pstmt.setString(1,prsn.getFirstName());
    		pstmt.setString(2,prsn.getLastName());
    		pstmt.setString(3,prsn.getAddress());
    		pstmt.set(4,prsn.getCity());
    		pstmt.executeUpdate();

	        
		}
	    	catch(SQLException e){
	    	 	System.err.println(e.getMessage());
	    	 	throw e;
	    	}
		catch (ClassNotFoundException e) {
			System.err.println(e.getMessage()); 
			throw e;
		}
	    	finally {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e) {          
				System.err.println(e); 
			}
	    }
	}
	
	public void removePerson (Person prsn) throws Exception {
		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
	        	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

	        	Statement statement = connection.createStatement();
	        	statement.setQueryTimeout(30); 

	        	//statement.executeUpdate("DELETE FROM Person WHERE name='"+ prsn.getName() + "'");
	        
		}
	    	catch(SQLException e){
	    	 	System.err.println(e.getMessage());
	    	 	throw e;
	    	}
		catch (ClassNotFoundException e) {
			System.err.println(e.getMessage()); 
			throw e;
		}
	    	finally {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e) {          
				System.err.println(e); 
			}
	    }
	}
	
	public List<Person> getPersons () throws Exception {
		List<Person> listOfPersons = new ArrayList<Person>();

		Connection connection = null;
		try {
			Class.forName("org.sqlite.JDBC");
	         	connection = DriverManager.getConnection("jdbc:sqlite:D:/DB/BazaDanychh.db");

	         	Statement statement = connection.createStatement();
	         	statement.setQueryTimeout(30); 

	         	ResultSet resultSet = statement.executeQuery("SELECT PersonID, FirstName, LastName, Adress, Person.CityID");
	         	while(resultSet.next())
	         	{
	        	 	Person newPerson = new Person();
	        	 	newPerson.setId(resultSet.getInt("PersonID"));
	        	 	newPerson.setFirstName(resultSet.getString("FirstName"));
	        	 	newPerson.setLastName(resultSet.getString("LastName"));
	        	 	newPerson.setAddress(resultSet.getString("Adress"));
	        	 	newPerson.setCity();
	        	 	
	        	 	listOfPersons.add (newPerson);
	         	}
		}
	    	catch(SQLException e){
	    	 	System.err.println(e.getMessage()); 
	    	}       
	    	finally {         
			try {
				if(connection != null)
					connection.close();
			}
			catch(SQLException e) {        
				System.err.println(e); 
			}
	    	}
		
		return listOfPersons;
	}
}

public class Person {
	private int id;
	private String firstName;
	private String lastName;
	private String address;
	private City city;

	public City getCity() {
		return city;
	}

	public void setCity(City city) {
		this.city = city;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Person() {
		
	}
		
	public String toString () {
		return "Person name: " + this.firstName;
	}
}
